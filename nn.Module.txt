nn.Module 로 구현하는 선형 회귀

이전 챕터까지는 선형 회귀를 좀 더 직접적으로 이해하기 위해 가설, 비용 함수를 직접 정의해서 선형 회귀 모델을 구현했습니다.
이번에는 파이토치에서 이미 구현되어져 제공되고 있는 함수들을 불러오는 것으로 더 쉽게 선형 회귀 모델을 구현해보겠습니다.

예를 들어 파이토치에서는 선형 회귀 모델이 nn.Linear() 라는 함수로, 또 평균 제곱오차가 nn.function.mse_loss()라는 함수로 구현되어져 있습니다.
아래는 이번 실습에서 사용할 두 함수의 사용 예제를 간단히 보여줍니다.

import torch.nn as nn
model = nn.Linear(input_dim, output_dim)

import torch.nn.functional as F
cost = F.mse_loss(prediction, y_train)

1. 단순 선형 회귀 구현하기

우선 필요한 도구들을 임포트합니다.
import torch
import torch.nn as nn
import torch.nn functional as F

torch.manual_seed(1)

이제 데이터를 선언합니다. 아래 데이터는 y = 2x 를 가정된 상태에서 만들어진 데이터로 우리는 이미 정답이 W=2, b=0 임을 알고 있는 상태입니다.
모델이 이 두 W와 b의 값을 제대로 찾아내도록 하는 것이 목표입니다.

# 데이터
x_train = torch.FloatTensor([[1], [2], [3]])
y_train = torch.FloatTensor([[2], [4], [6]])

데이터를 정의하였으니 이제 선형 회귀 모델을 구현할 차례입니다.
nn.Linear()는 입력의 차원, 출력의 차원을 인수로 받습니다.

# 모델을 선언 및 초기화. 단순 선형 회귀이므로 input_dim=1, output_dim=1
model = nn.Linear(1,1)

위 torch.nn.Linear 인자로 1, 1을 사용하였습니다.
하나의 입력 x에 대해서 하나의 출력 y를 가지므로, 입력 차원과 출력 차원 모두 1을 인수로 사용하였습니다.
model에는 가중치 W와 편향 b가 저장되어져 있습니다.
이 값은 model.parameters()라는 함수를 사용하여 불러올 수 있는데, 한 번 출력해보겠습니다.

print(list(model.parameters()))

[Parameter containing:
tensor([[0.5153]], requires_grad=True), Parameter containing:
tensor([-0.4414], requires_grad=True)]

2개의 값이 출력되는데 첫번째 값이 W고, 두번째 값이 b에 해당됩니다. 두 값 모두 현재는 랜덤 초기화가 되어져 있습니다.
그리고 두 값 모두 학습의 대상이므로 requires_grad = True 가 되어져 있는 것을 볼 수 있습니다.

이제 옵티마이저를 정의합니다. model.parameters()를 사용하여 W와 b를 전달합니다.
학습률(learning rate)은 0.01로 정합니다.

# optimizer 설정. 경사 하강법 SGD를 사용하고 learning rate를 의미하는 lr은 0.01
optimizer = torch.optim.SGD(model.parameters(), lr=0.01)

# 전체 훈련 데이터에 대해 경사 하강법을 2,000회 반복
nb_epochs = 2000
for epoch in range(nb_epochs+1):

  # H(x) 계산
  prediction = model(x_train)
  
  # cost 계산
  cost = F.mse_loss(prediction, y_train) # <== 파이토치에서 제공하는 평균 제곱 오차 함수
  
  # cost로 H(x) 개선하는 부분
  # gradient를 0으로 초기화
  optimizer.zero_grad()
  # 비용 함수를 미분하여 gradient 계산
  cost.backward() # backward 연산
  # W와 b를 업데이트
  optimizer.step()
  
  if epoch % 100 == 0:
  # 100번마다 로그 출력
  print('Epoch {:4d}/{} Cost: {:.6f}'.format(
    epoch, nb_epochs, cost.item()
    ))
    
학습이 완료되었습니다. Cost의 값이 매우 작습니다. W와 b의 값도 최적화가 되었는지 확인해봅시다.
x에 임의의 값 4를 넣어 모델이 예측하는 y의 값을 확인해보겠습니다.

...

model = nn.Linear(3,1)
위 torch.nn.Linear 인자로 3, 1을 사용하였습니다.
3개의 입력 x에 대해서 하나의 출력 y를 가지므로, 입력 차원은 3, 출력 차원은 1을 인수로 사용하였습니다.
model에는 3개의 가중치 w와 편향 b가 저장되어져 있습니다. 
이 값은 model.parameters() 라는 함수를 사용하여 불러올 수 있는데, 한 번 출력해보겠습니다.

print(list(model.parameters()))
[Parameter contraining:
tensor([[ 0.2975, -0.2548, -0.1119]], requires_grad=True), Parameter containing:
tensor([0.2710], requires_grad=True)]

첫번째 출력되는 것이 3개의 w고, 두번째 출력되는 것이 b에 해당됩니다. 두 값 모두 현재는 랜덤 초기화가 되어져 있습니다.
그리고 두 출력 결과 모두 학습의 대상이므로 requires_grad=True가 되어져 있는 것을 볼 수 있습니다.
